# main_v4.py ‚Äî –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
import logging
import asyncio
import gspread
import nest_asyncio
from oauth2client.service_account import ServiceAccountCredentials

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å asyncio
nest_asyncio.apply()

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets
def init_gsheets():
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', SCOPES)
        return gspread.authorize(creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None


client = init_gsheets()

# === ID —Ç–∞–±–ª–∏—Ü ===
TABLE_IDS = {
    'SVOD': '1iJCFtvWEJeGmqtlMXVhtbJlT153Hk4BsZyh19JONWO8'  # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
}

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ===
FILTER_CHOICE, NAME_INPUT, PRODUCER_INPUT = range(3)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø —Ç–≤–æ–π —Å–∫–ª–∞–¥—Å–∫–æ–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ",
        reply_markup=ReplyKeyboardMarkup(
            [["/ostatki", "/help"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )


# === –ö–æ–º–∞–Ω–¥–∞ /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/ostatki - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets ===
async def check_gsheets_connection():
    if not client:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        return False

    try:
        sheet = client.open_by_key(TABLE_IDS['SVOD'])
        sheet.worksheet('–û–±—â–∏–π —Å–∫–ª–∞–¥')
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        return False


# === –ö–æ–º–∞–Ω–¥–∞ /ostatki ===
async def ostatki_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    if not await check_gsheets_connection():
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    keyboard = [
        [KeyboardButton("üîç –ü–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é")],
        [KeyboardButton("üè≠ –ü–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë")]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:",
        reply_markup=reply_markup
    )
    return FILTER_CHOICE


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ ===
async def handle_filter_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    context.user_data['filter_choice'] = choice

    if "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é" in choice:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        return NAME_INPUT

    elif "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é" in choice:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
        producers = await get_unique_producers()
        if not producers:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return ConversationHandler.END

        keyboard = [[KeyboardButton(p)] for p in producers]
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=reply_markup
        )
        return PRODUCER_INPUT

    else:  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë
        await show_all_products(update)
        return ConversationHandler.END


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π ===
async def get_unique_producers():
    try:
        sheet = client.open_by_key(TABLE_IDS['SVOD']).worksheet('–û–±—â–∏–π —Å–∫–ª–∞–¥')
        data = sheet.get_all_values()

        if len(data) < 2:
            return []

        headers = [h.strip().lower() for h in data[0]]  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

        # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–æ–ª–±—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        prod_idx = -1
        possible_names = ['–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '—Ç–µ–≥', '–∑–∞–≤–æ–¥', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']
        for idx, header in enumerate(headers):
            if any(name in header for name in possible_names):
                prod_idx = idx
                break

        if prod_idx == -1:
            logger.error("–°—Ç–æ–ª–±–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥–æ–ª–æ–≤–∫–∏: %s", headers)
            return []

        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        producers = set()
        for row in data[1:]:
            if len(row) > prod_idx and row[prod_idx].strip():
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤
                producer_name = row[prod_idx].strip()
                if "–∫–∞—Ä–µ–ª–∏—è" in producer_name.lower():
                    producer_name = "–ö–∞—Ä–µ–ª–∏—è –ì—Ä–∞–Ω–∏—Ç"
                elif "—Ç–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ" in producer_name.lower():
                    producer_name = "–¢–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ"
                elif "–µ–≤—Ä–æ–º–æ–¥—É–ª" in producer_name.lower():
                    producer_name = "–ï–≤—Ä–æ–º–æ–¥—É–ª—å"
                producers.add(producer_name)

        return sorted(producers)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
        return []


# === –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π ===
async def show_all_products(update: Update):
    try:
        sheet = client.open_by_key(TABLE_IDS['SVOD']).worksheet('–û–±—â–∏–π —Å–∫–ª–∞–¥')
        data = sheet.get_all_values()

        if len(data) < 2:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        headers = [h.strip().lower() for h in data[0]]

        # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        name_idx = headers.index('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in headers else -1
        prod_idx = headers.index('—Ç–µ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞') if '—Ç–µ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' in headers else -1
        qty_idx = headers.index('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') if '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in headers else -1
        material_idx = headers.index('–º–∞—Ç–µ—Ä–∏–∞–ª') if '–º–∞—Ç–µ—Ä–∏–∞–ª' in headers else -1
        length_idx = headers.index('–¥–ª–∏–Ω–∞ (–º–º)') if '–¥–ª–∏–Ω–∞ (–º–º)' in headers else -1
        width_idx = headers.index('—à–∏—Ä–∏–Ω–∞ (–º–º)') if '—à–∏—Ä–∏–Ω–∞ (–º–º)' in headers else -1
        height_idx = headers.index('–≤—ã—Å–æ—Ç–∞ (–º–º)') if '–≤—ã—Å–æ—Ç–∞ (–º–º)' in headers else -1

        if name_idx == -1 or qty_idx == -1:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üì¶ <b>–¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ:</b>\n\n"
        count = 0

        for row in data[1:]:
            if len(row) > max(name_idx, qty_idx) and row[qty_idx].strip():
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                producer = row[prod_idx].strip() if prod_idx != -1 and len(row) > prod_idx else ""
                if "–∫–∞—Ä–µ–ª–∏—è" in producer.lower():
                    producer = "–ö–∞—Ä–µ–ª–∏—è –ì—Ä–∞–Ω–∏—Ç"
                elif "—Ç–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ" in producer.lower():
                    producer = "–¢–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ"
                elif "–µ–≤—Ä–æ–º–æ–¥—É–ª" in producer.lower():
                    producer = "–ï–≤—Ä–æ–º–æ–¥—É–ª—å"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                product_info = f"‚ñ™Ô∏è <b>{row[name_idx]}</b>"

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                if material_idx != -1 and len(row) > material_idx and row[material_idx].strip():
                    product_info += f" [{row[material_idx]}]"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
                dimensions = []
                if length_idx != -1 and len(row) > length_idx and row[length_idx].strip():
                    dimensions.append(f"–î: {row[length_idx]}–º–º")
                if width_idx != -1 and len(row) > width_idx and row[width_idx].strip():
                    dimensions.append(f"–®: {row[width_idx]}–º–º")
                if height_idx != -1 and len(row) > height_idx and row[height_idx].strip():
                    dimensions.append(f"–í: {row[height_idx]}–º–º")

                if dimensions:
                    product_info += f" ({', '.join(dimensions)})"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
                product_info += f" - {row[qty_idx]} —à—Ç"
                if producer:
                    product_info += f" ({producer})"

                # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(message + product_info + "\n") > 4000:
                    await update.message.reply_text(message, parse_mode='HTML')
                    message = ""

                message += product_info + "\n"
                count += 1

        if count == 0:
            message = "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        await update.message.reply_text(message, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è ===
async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_name = update.message.text
    await search_by_name(update, product_name)
    return ConversationHandler.END


# === –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π ===
async def search_by_name(update: Update, product_name: str):
    try:
        sheet = client.open_by_key(TABLE_IDS['SVOD']).worksheet('–û–±—â–∏–π —Å–∫–ª–∞–¥')
        data = sheet.get_all_values()

        if len(data) < 2:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        headers = [h.strip().lower() for h in data[0]]

        # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        name_idx = headers.index('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in headers else -1
        qty_idx = headers.index('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') if '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in headers else -1
        material_idx = headers.index('–º–∞—Ç–µ—Ä–∏–∞–ª') if '–º–∞—Ç–µ—Ä–∏–∞–ª' in headers else -1
        length_idx = headers.index('–¥–ª–∏–Ω–∞ (–º–º)') if '–¥–ª–∏–Ω–∞ (–º–º)' in headers else -1
        width_idx = headers.index('—à–∏—Ä–∏–Ω–∞ (–º–º)') if '—à–∏—Ä–∏–Ω–∞ (–º–º)' in headers else -1
        height_idx = headers.index('–≤—ã—Å–æ—Ç–∞ (–º–º)') if '–≤—ã—Å–æ—Ç–∞ (–º–º)' in headers else -1
        prod_idx = headers.index('—Ç–µ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞') if '—Ç–µ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' in headers else -1

        if name_idx == -1 or qty_idx == -1:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        found = False
        message = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{product_name}':</b>\n\n"

        for row in data[1:]:
            if len(row) > max(name_idx, qty_idx) and product_name.lower() in row[name_idx].lower():
                found = True

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                product_info = f"‚ñ™Ô∏è <b>{row[name_idx]}</b>"

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                if material_idx != -1 and len(row) > material_idx and row[material_idx].strip():
                    product_info += f" [{row[material_idx]}]"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
                dimensions = []
                if length_idx != -1 and len(row) > length_idx and row[length_idx].strip():
                    dimensions.append(f"–î: {row[length_idx]}–º–º")
                if width_idx != -1 and len(row) > width_idx and row[width_idx].strip():
                    dimensions.append(f"–®: {row[width_idx]}–º–º")
                if height_idx != -1 and len(row) > height_idx and row[height_idx].strip():
                    dimensions.append(f"–í: {row[height_idx]}–º–º")

                if dimensions:
                    product_info += f" ({', '.join(dimensions)})"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
                product_info += f" - {row[qty_idx]} —à—Ç"
                if prod_idx != -1 and len(row) > prod_idx and row[prod_idx].strip():
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                    producer = row[prod_idx].strip()
                    if "–∫–∞—Ä–µ–ª–∏—è" in producer.lower():
                        producer = "–ö–∞—Ä–µ–ª–∏—è –ì—Ä–∞–Ω–∏—Ç"
                    elif "—Ç–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ" in producer.lower():
                        producer = "–¢–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ"
                    elif "–µ–≤—Ä–æ–º–æ–¥—É–ª" in producer.lower():
                        producer = "–ï–≤—Ä–æ–º–æ–¥—É–ª—å"
                    product_info += f" ({producer})"

                # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(message + product_info + "\n") > 4000:
                    await update.message.reply_text(message, parse_mode='HTML')
                    message = ""

                message += product_info + "\n"

        if not found:
            message = f"‚ùå –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        await update.message.reply_text(message, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è ===
async def handle_producer_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    producer = update.message.text
    await search_by_producer(update, producer)
    return ConversationHandler.END


# === –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π ===
async def search_by_producer(update: Update, producer: str):
    try:
        sheet = client.open_by_key(TABLE_IDS['SVOD']).worksheet('–û–±—â–∏–π —Å–∫–ª–∞–¥')
        data = sheet.get_all_values()

        if len(data) < 2:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        headers = [h.strip().lower() for h in data[0]]

        # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–æ–ª–±—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        prod_idx = -1
        possible_names = ['–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '—Ç–µ–≥', '–∑–∞–≤–æ–¥', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']
        for idx, header in enumerate(headers):
            if any(name in header for name in possible_names):
                prod_idx = idx
                break

        if prod_idx == -1:
            await update.message.reply_text("‚ùå –°—Ç–æ–ª–±–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        qty_idx = headers.index('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') if '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in headers else -1
        name_idx = headers.index('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in headers else -1
        material_idx = headers.index('–º–∞—Ç–µ—Ä–∏–∞–ª') if '–º–∞—Ç–µ—Ä–∏–∞–ª' in headers else -1
        length_idx = headers.index('–¥–ª–∏–Ω–∞ (–º–º)') if '–¥–ª–∏–Ω–∞ (–º–º)' in headers else -1
        width_idx = headers.index('—à–∏—Ä–∏–Ω–∞ (–º–º)') if '—à–∏—Ä–∏–Ω–∞ (–º–º)' in headers else -1
        height_idx = headers.index('–≤—ã—Å–æ—Ç–∞ (–º–º)') if '–≤—ã—Å–æ—Ç–∞ (–º–º)' in headers else -1

        if qty_idx == -1:
            await update.message.reply_text("‚ùå –°—Ç–æ–ª–±–µ—Ü –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        found = False
        message = f"üè≠ <b>–¢–æ–≤–∞—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è '{producer}':</b>\n\n"

        for row in data[1:]:
            if len(row) > max(prod_idx, qty_idx):
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                row_producer = row[prod_idx].strip()
                if "–∫–∞—Ä–µ–ª–∏—è" in row_producer.lower():
                    row_producer = "–ö–∞—Ä–µ–ª–∏—è –ì—Ä–∞–Ω–∏—Ç"
                elif "—Ç–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ" in row_producer.lower():
                    row_producer = "–¢–µ—Ö–Ω–æ–≥–∞–±–±—Ä–æ"
                elif "–µ–≤—Ä–æ–º–æ–¥—É–ª" in row_producer.lower():
                    row_producer = "–ï–≤—Ä–æ–º–æ–¥—É–ª—å"

                if producer.lower() == row_producer.lower():
                    found = True

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                    name = row[name_idx] if name_idx != -1 and len(row) > name_idx else "–¢–æ–≤–∞—Ä"
                    product_info = f"‚ñ™Ô∏è <b>{name}</b>"

                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                    if material_idx != -1 and len(row) > material_idx and row[material_idx].strip():
                        product_info += f" [{row[material_idx]}]"

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
                    dimensions = []
                    if length_idx != -1 and len(row) > length_idx and row[length_idx].strip():
                        dimensions.append(f"–î: {row[length_idx]}–º–º")
                    if width_idx != -1 and len(row) > width_idx and row[width_idx].strip():
                        dimensions.append(f"–®: {row[width_idx]}–º–º")
                    if height_idx != -1 and len(row) > height_idx and row[height_idx].strip():
                        dimensions.append(f"–í: {row[height_idx]}–º–º")

                    if dimensions:
                        product_info += f" ({', '.join(dimensions)})"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    product_info += f" - {row[qty_idx]} —à—Ç"

                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(message + product_info + "\n") > 4000:
                        await update.message.reply_text(message, parse_mode='HTML')
                        message = ""

                    message += product_info + "\n"

        if not found:
            message = f"‚ùå –¢–æ–≤–∞—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è '{producer}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        await update.message.reply_text(message, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é")


# === –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    return ConversationHandler.END


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def main():
    if not client:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Google Sheets. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials.json")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token('7792257008:AAGngevMPifXSz3KfXdsoXm5JPeeg0tTA1Q').build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ostatki
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('ostatki', ostatki_command)],
        states={
            FILTER_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_filter_choice)
            ],
            NAME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name_input)
            ],
            PRODUCER_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_producer_input)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()